{"version":3,"sources":["components/SideText.js","components/Site.js","components/AnimatedWeather.js","components/Weather.js","components/map.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Text","react_default","a","createElement","className","Form","props","onSubmit","loadWeather","type","name","placeholder","onClick","loadGps","index_es","icon","faMapMarkerAlt","loadMap","faMapMarkedAlt","defaults","AnimatedWeather","build_default","color","size","animate","Weather","city","country","temperature","components_AnimatedWeather","humidity","description","clouds","pressure","error","myIcon","L","iconUrl","iconSize","iconAnchor","popupAnchor","MapWithinGreatM","state","location","lat","lng","zoom","_this2","this","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","shouldRender","closeMap","Map","center","TileLayer","attribution","url","Marker","Popup","React","Component","API_KEY","ICONS","01d","01n","02d","02n","03d","03n","04d","04n","09d","09n","10d","10n","11d","11n","13d","13n","50d","50n","LoadWeather","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","event","preventDefault","target","elements","value","fetch","concat","then","response","ok","json","console","log","data","sys","main","temp","weather","all","lon","coord","undefined","enableHighAccuracy","timeout","maximumAge","mapState","_this$state","map","SideText","Site","components_Weather","App","App_LoadWeather","Boolean","window","hostname","match","ReactDOM","render","components_App_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"iQASeA,SAPF,kBACTC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,IAAwCH,EAAAC,EAAAC,cAAA,sBAAxC,aACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,6BAAd,mECcOC,EAbF,SAAAC,GAAK,OACdL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,QAAMI,SAAUD,EAAME,aAClBP,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3CV,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9CV,EAAAC,EAAAC,cAAA,8BAEJF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMQ,QAASN,EAAMO,SAASZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAiBC,KAAMC,OACvEf,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUQ,QAASN,EAAMW,SAAShB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAiBC,KAAMG,0BCX7EC,EAEK,QAFLA,EAGI,GAHJA,GAIO,EAYEC,EATS,SAACd,GAAD,OACpBL,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,CACIa,KAAMT,EAAMS,KACZO,MAAOH,EACPI,KAAMJ,EACNK,QAASL,KC2BFM,EAvCC,SAAAnB,GAAK,OACjBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAEPE,EAAMoB,MAAQpB,EAAMqB,SAAW1B,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,aAC3BH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAmCE,EAAMoB,KAAzC,KAAiDpB,EAAMqB,UAI3DrB,EAAMsB,aAAe3B,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,gBACjBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAkCH,EAAAC,EAAAC,cAAC0B,EAAD,CAAiBd,KAAMT,EAAMS,OAAQT,EAAMsB,YAA7E,IAA0F3B,EAAAC,EAAAC,cAAA,gBAA1F,MAIJG,EAAMwB,UAAY7B,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,aACdH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAmCE,EAAMwB,SAAzC,OAIJxB,EAAMyB,aAAe9B,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,eACjBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAmCE,EAAMyB,YAAzC,MAIJzB,EAAM0B,QAAU/B,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,WACZH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAmCE,EAAM0B,OAAzC,OAIJ1B,EAAM2B,UAAYhC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,aACdH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAmCE,EAAM2B,SAAzC,SAIJ3B,EAAM4B,OAASjC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBE,EAAM4B,iEC/B1DC,EAASC,IAAErB,KAAK,CAClBsB,QAAS,iEACTC,SAAc,CAAC,GAAI,IACnBC,WAAc,CAAC,KAAM,IACrBC,YAAc,CAAC,GAAI,MA4CRC,6MAxCXC,MAAQ,CACJC,SAAS,CACLC,IAAK,OACLC,IAAK,GAETC,KAAM,uFAEU,IAAAC,EAAAC,KACfC,UAAUC,YAAYC,mBAAmB,SAACC,GAC3CL,EAAKM,SAAS,CACVV,SAAU,CACNC,IAAKQ,EAASE,OAAOC,SACrBV,IAAKO,EAASE,OAAOE,gDAO7B,IAAMJ,EAAW,CAACJ,KAAKN,MAAMC,SAASC,IAAKI,KAAKN,MAAMC,SAASE,KAC/D,OACQ5C,EAAAC,EAAAC,cAAA,OAAKC,UAAW4C,KAAK1C,MAAMmD,aAAe,MAAQ,UAC9CxD,EAAAC,EAAAC,cAAA,UAAQC,UAAU,QAAQQ,QAASoC,KAAK1C,MAAMoD,UAA9C,SACAzD,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CAAKvD,UAAU,MAAMwD,OAAQR,EAAUN,KAAME,KAAKN,MAAMI,MACpD7C,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CACIC,YAAY,0EACZC,IAAI,uDAER9D,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAQZ,SAAUA,EACdrC,KAAMoB,GACNlC,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,oBACgBhE,EAAAC,EAAAC,cAAA,sBAhCd+D,IAAMC,WCH9BC,EAAU,mCACVC,EAAQ,CACVC,MAAO,YACPC,MAAO,cACPC,MAAO,oBACPC,MAAO,sBACPC,MAAO,SACPC,MAAO,SACPC,MAAO,SACPC,MAAO,SACPC,MAAO,OACPC,MAAO,OACPC,MAAO,OACPC,MAAO,OACPC,MAAO,QACPC,MAAO,QACPC,MAAO,OACPC,MAAO,OACPC,MAAO,MACPC,MAAO,OAGLC,cACF,SAAAA,EAAYlF,GAAM,IAAAmF,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA1C,KAAAwC,IACdC,EAAAC,OAAAE,EAAA,EAAAF,CAAA1C,KAAA0C,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA9C,KAAM1C,KAiBVE,YAAc,SAACuF,GACPA,EAAMC,iBACN,IAAMtE,EAAOqE,EAAME,OAAOC,SAASxE,KAAKyE,MAClCxE,EAAUoE,EAAME,OAAOC,SAASvE,QAAQwE,MAC9CC,MAAK,qDAAAC,OAAsD3E,EAAtD,KAAA2E,OAA8D1E,EAA9D,wBAAA0E,OAA4FjC,IAC5FkC,KAAK,SAAAC,GACE,GAAGA,EAASC,GACR,OAAOD,EAASE,OAGhBC,QAAQC,IAAIJ,KAIvBD,KAAK,SAAAM,GACClF,GAAQC,EACP8D,EAAKpC,SAAS,CACV3B,KAAMkF,EAAKlG,KACXiB,QAASiF,EAAKC,IAAIlF,QAClBC,YAAagF,EAAKE,KAAKC,KACvBjF,SAAU8E,EAAKE,KAAKhF,SACpBG,SAAU2E,EAAKE,KAAK7E,SACpBF,YAAa6E,EAAKI,QAAQ,GAAGjF,YAC7BhB,KAAMsD,EAAMuC,EAAKI,QAAQ,GAAGjG,MAC5BiB,OAAQ4E,EAAK5E,OAAOiF,IACpBC,IAAKN,EAAKO,MAAMD,IAChBtE,IAAKgE,EAAKO,MAAMvE,IAChBV,MAAO,KAGXuD,EAAKpC,SAAS,CACVzB,iBAAawF,EACb1F,UAAM0F,EACNzF,aAASyF,EACTtF,cAAUsF,EACVrF,iBAAaqF,EACbnF,cAAUmF,EACVpF,YAAQoF,EACRlF,MAAO,gCAxDbuD,EA8DlB5E,QAAQ,WACAoC,UAAUC,YAAYC,mBAClB,SAACC,GACGgD,MAAK,uDAAAC,OAAwDjD,EAASE,OAAOC,SAAxE,SAAA8C,OAAwFjD,EAASE,OAAOE,UAAxG,wBAAA6C,OAAwIjC,IACxIkC,KAAK,SAAAC,GACE,GAAGA,EAASC,GACR,OAAOD,EAASE,OAGhBC,QAAQC,IAAIJ,KAIvBD,KAAK,SAAAM,GACExD,EACAqC,EAAKpC,SAAS,CACV3B,KAAMkF,EAAKlG,KACXiB,QAASiF,EAAKC,IAAIlF,QAClBC,YAAagF,EAAKE,KAAKC,KACvBjF,SAAU8E,EAAKE,KAAKhF,SACpBG,SAAU2E,EAAKE,KAAK7E,SACpBF,YAAa6E,EAAKI,QAAQ,GAAGjF,YAC7BhB,KAAMsD,EAAMuC,EAAKI,QAAQ,GAAGjG,MAC5BiB,OAAQ4E,EAAK5E,OAAOiF,IACpB/E,MAAO,KAGXuD,EAAKpC,SAAS,CACVzB,iBAAawF,EACb1F,UAAM0F,EACNzF,aAASyF,EACTtF,cAAUsF,EACVrF,iBAAaqF,EACbnF,cAAUmF,EACVpF,YAAQoF,EACRlF,MAAO,gCAK3B,SAACA,GAAD,OAAWwE,QAAQC,IAAI,qBAAsBzE,IAC7C,CAAEmF,oBAAoB,EAAMC,QAAS,IAAOC,WAAY,OAvGlD9B,EA2GlBxE,QAAQ,WACAwE,EAAK/C,MAAM8E,UACX/B,EAAKpC,SAAS,CACVmE,UAAU,KA9GJ/B,EAoHlB/B,SAAS,WACF+B,EAAK/C,MAAM8E,UACV/B,EAAKpC,SAAS,CACVmE,UAAU,KArHlB/B,EAAK/C,MAAM,CACPd,iBAAawF,EACb1F,UAAM0F,EACNzF,aAASyF,EACTtF,cAAUsF,EACVrF,iBAAaqF,EACbnF,cAAUmF,EACVlF,WAAOkF,EACPrG,UAAMqG,EACNpF,YAAQoF,EACRxE,SAAKwE,EACLF,SAAKE,EACLI,UAAU,GAdA/B,wEA4HT,IAAAgC,EAC0GzE,KAAKN,MAA7GhB,EADF+F,EACE/F,KAAMC,EADR8F,EACQ9F,QAASC,EADjB6F,EACiB7F,YAAaE,EAD9B2F,EAC8B3F,SAAUC,EADxC0F,EACwC1F,YAAahB,EADrD0G,EACqD1G,KAAMiB,EAD3DyF,EAC2DzF,OAAQC,EADnEwF,EACmExF,SAAUC,EAD7EuF,EAC6EvF,MAAOsF,EADpFC,EACoFD,SAAUN,EAD9FO,EAC8FP,IAAKtE,EADnG6E,EACmG7E,IACxG,OACI3C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAACuH,EAAD,CAAiBhE,SAAUV,KAAKU,SAAUD,aAAc+D,EAAUN,IAAKA,EAAKtE,IAAKA,IACjF3C,EAAAC,EAAAC,cAAA,OAAKC,UAAW4C,KAAKN,MAAM8E,SAAW,SAAW,QACzCvH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAACwH,EAAD,OAEJ1H,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACfH,EAAAC,EAAAC,cAACyH,EAAD,CAAMpH,YAAawC,KAAKxC,YAAaK,QAASmC,KAAKnC,QAASI,QAAS+B,KAAK/B,UAC1EhB,EAAAC,EAAAC,cAAC0H,EAAD,CAASjG,YAAaA,EACpBb,KAAMA,EACNe,SAAUA,EACVJ,KAAMA,EACNC,QAASA,EACTI,YAAaA,EACbE,SAAUA,EACVD,OAAQA,EACRE,MAAOA,gBAlJfiC,aAsKX2D,mLARX,OACE7H,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4H,EAAD,cAJU5D,aC/KE6D,QACW,cAA7BC,OAAOtF,SAASuF,UAEe,UAA7BD,OAAOtF,SAASuF,UAEhBD,OAAOtF,SAASuF,SAASC,MACvB,2DCZNC,IAASC,OAAOpI,EAAAC,EAAAC,cAACmI,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBvF,WACrBA,UAAUwF,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.9dad9032.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Text = () => (\r\n    <div>\r\n        <h1 className=\"title-container__title\"> <span>simple</span> Weather </h1>\r\n        <h3 className=\"title-container__subtitle\">Find out temperature, conditions and more...</h3>\r\n    </div>\r\n);\r\n\r\nexport default Text;","import React from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport { faMapMarkedAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nconst Form = props => (\r\n    <div className='form' >\r\n        <form onSubmit={props.loadWeather}>\r\n            <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n            <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n            <button>Get Weather</button>\r\n        </form>\r\n        <button className='gps' onClick={props.loadGps}><FontAwesomeIcon icon={faMapMarkerAlt}/></button>\r\n        <button className='showMap' onClick={props.loadMap}><FontAwesomeIcon icon={faMapMarkedAlt}/></button>\r\n    </div>\r\n\r\n);\r\n\r\nexport default Form;","import React from 'react';\r\nimport ReactAnimatedWeather from 'react-animated-weather';\r\n\r\nconst defaults = {\r\n    icon: 'CLEAR_DAY',\r\n    color: 'white',\r\n    size: 50,\r\n    animate: true\r\n};\r\n\r\nconst AnimatedWeather = (props) => (\r\n    <ReactAnimatedWeather\r\n        icon={props.icon}\r\n        color={defaults.color}\r\n        size={defaults.size}\r\n        animate={defaults.animate}\r\n    />\r\n);\r\n\r\nexport default AnimatedWeather;","import React from \"react\";\r\nimport AnimatedWeather from './AnimatedWeather'\r\n\r\nconst Weather = props => (\r\n    <div className=\"weather__info\">\r\n        {\r\n            props.city && props.country && <p className=\"weather__key\"> Location:\r\n                <span className=\"weather__value\"> {props.city}, {props.country}</span>\r\n            </p>\r\n        }\r\n        {\r\n            props.temperature && <p className=\"weather__key\"> Temperature:\r\n                <span className=\"weather__value\"> <AnimatedWeather icon={props.icon}/>{props.temperature} <sup>o</sup>C</span>\r\n            </p>\r\n        }\r\n        {\r\n            props.humidity && <p className=\"weather__key\"> Humidity:\r\n                <span className=\"weather__value\"> {props.humidity} %</span>\r\n            </p>\r\n        }\r\n        {\r\n            props.description && <p className=\"weather__key\"> Conditions:\r\n                <span className=\"weather__value\"> {props.description} </span>\r\n            </p>\r\n        }\r\n        {\r\n            props.clouds && <p className=\"weather__key\"> Clouds:\r\n                <span className=\"weather__value\"> {props.clouds} %</span>\r\n            </p>\r\n        }\r\n        {\r\n            props.pressure && <p className=\"weather__key\"> Pressure:\r\n                <span className=\"weather__value\"> {props.pressure} hpa</span>\r\n            </p>\r\n        }\r\n        {\r\n            props.error && <p className=\"weather__error\">{props.error}</p>\r\n        }\r\n\r\n    </div>\r\n);\r\n\r\nexport default Weather;","import React from 'react';\r\nimport 'leaflet/dist/leaflet.css'\r\nimport L from 'leaflet'\r\nimport {Map, TileLayer, Marker, Popup} from 'react-leaflet'\r\n\r\nconst myIcon = L.icon({\r\n    iconUrl: 'https://unpkg.com/leaflet@1.4.0/dist/images/marker-icon-2x.png',\r\n    iconSize:     [25, 41], // size of the icon\r\n    iconAnchor:   [12.5, 41], // point of the icon which will correspond to marker's location\r\n    popupAnchor:  [0, -41] // point from which the popup should open relative to the iconAnchor\r\n});\r\n\r\nclass MapWithinGreatM extends React.Component{\r\n    state = {\r\n        location:{\r\n            lat: 51.505,\r\n            lng: 0,\r\n        },\r\n        zoom: 13,\r\n    }\r\n    componentDidMount() {\r\n         navigator.geolocation.getCurrentPosition((position) =>{\r\n        this.setState({\r\n            location: {\r\n                lat: position.coords.latitude,\r\n                lng: position.coords.longitude,\r\n            }\r\n        })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const position = [this.state.location.lat, this.state.location.lng]\r\n        return (\r\n                <div className={this.props.shouldRender ? 'map' : 'hidden'}>\r\n                    <button className='onMap' onClick={this.props.closeMap}>Close</button>\r\n                    <Map className='map' center={position} zoom={this.state.zoom}>\r\n                        <TileLayer\r\n                            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                        />\r\n                        <Marker position={position}\r\n                            icon={myIcon}>\r\n                            <Popup>\r\n                                You are here<br />\r\n                            </Popup>\r\n                        </Marker>\r\n                    </Map>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MapWithinGreatM;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\n\r\nimport Text from '../SideText';\r\nimport Site from '../Site';\r\nimport Weather from '../Weather';\r\nimport MapWithinGreatM from '../map'\r\n\r\nconst API_KEY = '5b6e2ea387d6bc208427c65ed96cd662'\r\nconst ICONS = {\r\n    \"01d\": \"CLEAR_DAY\",\r\n    \"01n\": \"CLEAR_NIGHT\",\r\n    \"02d\": \"PARTLY_CLOUDY_DAY\",\r\n    \"02n\": \"PARTLY_CLOUDY_NIGHT\",\r\n    \"03d\": \"CLOUDY\",\r\n    \"03n\": \"CLOUDY\",\r\n    \"04d\": \"CLOUDY\",\r\n    \"04n\": \"CLOUDY\",\r\n    \"09d\": \"RAIN\",\r\n    \"09n\": \"RAIN\",\r\n    \"10d\": \"RAIN\",\r\n    \"10n\": \"RAIN\",\r\n    \"11d\": \"SLEET\",\r\n    \"11n\": \"SLEET\",\r\n    \"13d\": \"SNOW\",\r\n    \"13n\": \"SNOW\",\r\n    \"50d\": \"FOG\",\r\n    \"50n\": \"FOG\",\r\n}\r\n\r\nclass LoadWeather extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            temperature: undefined,\r\n            city: undefined,\r\n            country: undefined,\r\n            humidity: undefined,\r\n            description: undefined,\r\n            pressure: undefined,\r\n            error: undefined,\r\n            icon: undefined,\r\n            clouds: undefined,\r\n            lat: undefined,\r\n            lon: undefined,\r\n            mapState: false\r\n\r\n        }\r\n    }\r\n    loadWeather = (event) => {\r\n            event.preventDefault();\r\n            const city = event.target.elements.city.value;\r\n            const country = event.target.elements.country.value;\r\n            fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=metric&appid=${API_KEY}`)\r\n                .then(response => {\r\n                        if(response.ok){\r\n                            return response.json();\r\n\r\n                        } else {\r\n                            console.log(response)\r\n                        }\r\n                    }\r\n                )\r\n                .then(data =>{\r\n                    if(city && country){\r\n                        this.setState({\r\n                            city: data.name,\r\n                            country: data.sys.country,\r\n                            temperature: data.main.temp,\r\n                            humidity: data.main.humidity,\r\n                            pressure: data.main.pressure,\r\n                            description: data.weather[0].description,\r\n                            icon: ICONS[data.weather[0].icon],\r\n                            clouds: data.clouds.all,\r\n                            lon: data.coord.lon,\r\n                            lat: data.coord.lat,\r\n                            error: ''\r\n                        })\r\n                    }else {\r\n                        this.setState({\r\n                            temperature: undefined,\r\n                            city: undefined,\r\n                            country: undefined,\r\n                            humidity: undefined,\r\n                            description: undefined,\r\n                            pressure: undefined,\r\n                            clouds: undefined,\r\n                            error: 'Please enter the values.'\r\n                        })\r\n                    }\r\n            })\r\n        }\r\n\r\n    loadGps=()=>{\r\n            navigator.geolocation.getCurrentPosition(\r\n                (position) => {\r\n                    fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${position.coords.latitude}&lon=${position.coords.longitude}&units=metric&appid=${API_KEY}`)\r\n                        .then(response => {\r\n                                if(response.ok){\r\n                                    return response.json();\r\n\r\n                                } else {\r\n                                    console.log(response)\r\n                                }\r\n                            }\r\n                        )\r\n                        .then(data => {\r\n                            if (position) {\r\n                                this.setState({\r\n                                    city: data.name,\r\n                                    country: data.sys.country,\r\n                                    temperature: data.main.temp,\r\n                                    humidity: data.main.humidity,\r\n                                    pressure: data.main.pressure,\r\n                                    description: data.weather[0].description,\r\n                                    icon: ICONS[data.weather[0].icon],\r\n                                    clouds: data.clouds.all,\r\n                                    error: ''\r\n                                })\r\n                            } else {\r\n                                this.setState({\r\n                                    temperature: undefined,\r\n                                    city: undefined,\r\n                                    country: undefined,\r\n                                    humidity: undefined,\r\n                                    description: undefined,\r\n                                    pressure: undefined,\r\n                                    clouds: undefined,\r\n                                    error: 'Please enter the values.'\r\n                                })\r\n                            }\r\n                        })\r\n                },\r\n                (error) => console.log(\"error localization\", error),\r\n                { enableHighAccuracy: true, timeout: 20000, maximumAge: 1000 },\r\n            );\r\n        }\r\n\r\n    loadMap=()=>{\r\n        if(!this.state.mapState) {\r\n            this.setState({\r\n                mapState: true\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    closeMap=()=>{\r\n        if(this.state.mapState){\r\n            this.setState({\r\n                mapState: false\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {city, country, temperature, humidity, description, icon, clouds, pressure, error, mapState, lon, lat} = this.state\r\n        return (\r\n            <div>\r\n                <div className=\"wrapper\">\r\n                    <MapWithinGreatM closeMap={this.closeMap} shouldRender={mapState} lon={lon} lat={lat}/>\r\n                    <div className={this.state.mapState ? 'hidden' : 'main'}>\r\n                            <div className=\"row\">\r\n                                <div className=\"title-container\">\r\n                                    <Text/>\r\n                                </div>\r\n                                <div className=\"form-container\">\r\n                                <Site loadWeather={this.loadWeather} loadGps={this.loadGps} loadMap={this.loadMap}/>\r\n                                <Weather temperature={temperature}\r\n                                  icon={icon}\r\n                                  humidity={humidity}\r\n                                  city={city}\r\n                                  country={country}\r\n                                  description={description}\r\n                                  pressure={pressure}\r\n                                  clouds={clouds}\r\n                                  error={error}/>\r\n                                </div>\r\n                            </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <LoadWeather/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}